import fs from "fs";
import zod from "zod";
import { parse } from "yaml";
import Handlebars from "handlebars";

const __dirname = new URL('.', import.meta.url).pathname;

const README_PREFACE = "<!--- This file is generated by the script at generator/index.js. Do not edit directly. -->\n\n";

validate()
    .then(generateReadme)
    .then(readme => fs.writeFileSync(__dirname + "/../README.md", README_PREFACE + readme))
    .catch(console.error);

async function validate() {
    const data = parse(fs.readFileSync(__dirname + '/../catalog.yaml', 'utf8'));
    
    const availableTags = data.tags.map(tag => tag.name);
    
    const LabspacesSchema = zod.array(
        zod.object({
            title: zod.string(),
            description: zod.string(),
            repo: zod.url(),
            publishedRepo: zod.string(),
            author: zod.string(),
            datePublished: zod.date()
                .min(new Date("2025-09-01"), { error: "Can't have a date before launch" })
                .max(new Date(), { error: "Can't have a future date" }),
            level: zod.enum(['Beginner', 'Intermediate', 'Advanced']),
            tags: zod.array(zod.enum(availableTags)),
        })
    );
    
    const errors = [];
    for (let lab of data.labspaces) {
        if (lab.datePublished) {
            lab.datePublished = new Date(lab.datePublished);
        }
    }
    
    const result = LabspacesSchema.safeParse(data.labspaces);
    if (!result.success) {
        for (let err of result.error.issues) {
            errors.push(`Error at labspaces.${err.path.join('.')} : ${err.message}`);
        }
    }

    if (errors.length > 0) {
        throw new Error("Validation errors found: \n - " + errors.join("\n - "));
    }

    return data;
}

async function generateReadme(data) {
    Handlebars.registerHelper('hasTag', function (labspace, requiredTag) {
        return labspace.tags.includes(requiredTag);
    });

    Handlebars.registerHelper("trim", (str) => str.trim());

    Handlebars.registerHelper("ddLink", (labspace) => {
        const url = new URL("http://open.docker.com/dashboard/extension-tab?extensionId=dockersamples/labspace-extension");
        url.searchParams.set("location", encodeURIComponent(labspace.publishedRepo));
        url.searchParams.set("title", encodeURIComponent(labspace.title));
        return new Handlebars.SafeString(`[Open in Docker Desktop](${url.toString()})`);
    });

    Handlebars.registerHelper("difficultyStars", (level) => {
        switch (level) {
            case "Beginner":
                return "⭐⭑⭑";
            case "Intermediate":
                return "⭐⭐⭑";
            case "Advanced":
                return "⭐⭐⭐";
            default:
                return "";
        }
    });

    const tags = data.tags.map(tag => ({
        ...tag,
        labspaces: data.labspaces
            .filter(labspace => labspace.tags.includes(tag.name))
            .sort((a, b) => b.datePublished > a.datePublished)
    })).filter(tag => tag.labspaces.length > 0);

    const template = Handlebars.compile(fs.readFileSync(__dirname + "/README.md.handlebars", "utf8"));

    return template({ tags });
}